#!/bin/bash

# --- Configuration ---
# q: are you alive baby boy? 
# a: 
# Backup directories
BACKUP_DIR="$HOME/backups/secrets" # General directory for all secrets backup
KEYRING_BACKUP_DIR="$BACKUP_DIR/keyrings"
KEYS_BACKUP_DIR="$BACKUP_DIR/keys"

#Keyring settings
KEYRING_DIR="$HOME/.local/share/keyrings"

# SSH/GPG Key paths
SSH_PRIVATE_KEYS=($(fd -t f . ~/.ssh/))
# TODO: backup a composite file for each GPG key that includes the path as a header, so that the key can be restored to the correct location.
# TODO: research what would happen if I saved backup codes separated by null char as a single string? will this make the encryption vulnerable?
GPG_PRIVATE_KEYS=("$HOME/.gnupg/private-keys-v1.d/YOUR_PRIVATE_KEY" "$HOME/.gnupg/private-keys-v1.d/ANOTHER_PRIVATE_KEY") # Put all your private keys
# Compression method (gzip, brotli, none)
COMPRESSION="brotli" #Change this to "gzip" or "none"

# --- Functions ---

# Function to backup keyring
backup_keyring() {
  TIMESTAMP=$(date +%Y%m%d-%H%M%S)
  KEYRING_BACKUP_FILE="$KEYRING_BACKUP_DIR/keyring-backup-$TIMESTAMP.tar"

  #Ensure backup directory exists.
  mkdir -p "$KEYRING_BACKUP_DIR"

  tar cf "$KEYRING_BACKUP_FILE" "$KEYRING_DIR"
  compress_file "$KEYRING_BACKUP_FILE"
  # TODO: eventually move to toplip
  gpg -c --cipher-algo AES256 -o "$KEYRING_BACKUP_FILE.gpg" "$KEYRING_BACKUP_FILE.$COMPRESSION"
  rm "$KEYRING_BACKUP_FILE.$COMPRESSION"
  echo "Keyring backup created and encrypted to: $KEYRING_BACKUP_FILE.gpg"
}


# Function to backup keys (SSH and GPG)
backup_keys() {
  TIMESTAMP=$(date +%Y%m%d-%H%M%S)
  KEYS_BACKUP_FILE="$KEYS_BACKUP_DIR/keys-backup-$TIMESTAMP.tar"

  #Ensure backup directory exists.
  mkdir -p "$KEYS_BACKUP_DIR"

  # Temporary array for encrypted files
  declare -a ENCRYPTED_FILES

  # Encrypt SSH keys
  for key in "${SSH_PRIVATE_KEYS[@]}"; do
    if [[ -f "$key" ]]; then
      # TODO: eventually move to toplip
      gpg -c --cipher-algo AES256 -o "$key.gpg" "$key"
      ENCRYPTED_FILES+=("$key.gpg")
    fi
  done
    # Encrypt GPG keys
  for key in "${GPG_PRIVATE_KEYS[@]}"; do
    if [[ -f "$key" ]]; then
       # TODO: eventually move to toplip
       gpg -c --cipher-algo AES256 -o "$key.gpg" "$key"
       ENCRYPTED_FILES+=("$key.gpg")
    fi
  done

  # Create the tar archive
  tar cf "$KEYS_BACKUP_FILE" "${ENCRYPTED_FILES[@]}"
  compress_file "$KEYS_BACKUP_FILE"
  gpg -c --cipher-algo AES256 -o "$KEYS_BACKUP_FILE.gpg" "$KEYS_BACKUP_FILE.$COMPRESSION"
  rm "$KEYS_BACKUP_FILE.$COMPRESSION"
  echo "Keys backup created and encrypted to: $KEYS_BACKUP_FILE.gpg"

  # Remove temporary encrypted key files
  for file in "${ENCRYPTED_FILES[@]}"; do
    rm "$file"
  done
}


# Function to compress a file
compress_file() {
  local file="$1"

  case "$COMPRESSION" in
      "gzip")
        gzip "$file"
        mv "$file".gz "$file.$COMPRESSION"
        ;;
      "brotli")
        brotli "$file"
        mv "$file".br "$file.$COMPRESSION"
        ;;
        "none")
          :
        ;;
      *)
        echo "Invalid compression method specified. Please select 'gzip','brotli' or 'none'."
        exit 1
        ;;
  esac
}


# Function to retrieve API Key from keyring
get_api_key() {
  local service="$1"
  local key="$2"

  # Use secret-tool to lookup the key, capturing output
  local api_key=$(secret-tool lookup service="$service" key="$key" 2>/dev/null)

  if [[ -z "$api_key" ]]; then
    echo "Error: API key not found for service '$service' and key '$key'."
    return 1  # Indicate an error
  else
    echo "$api_key" # Print the key
    return 0 # Indicate success
  fi
}

# Function to retrieve API keys programmatically
retrieve_all_api_keys() {

  echo "Retrieving all API Keys..."

  secret-tool list-secrets | while IFS='=' read -r key value; do
  if [[ $key == "service" ]]; then
    #extracting service name
    serviceName=${value%key*}
    serviceName=${serviceName::-1} #removing last character

    #getting all secrets for this service.
    keys=$(secret-tool list-secrets service="$serviceName")

     #Extracting key and retrieving them.
    echo "----------------------"
    echo "service: "$serviceName
    echo "----------------------"

    while IFS='=' read -r key value; do
        if [[ $key == "key" ]] ; then
          keyName=${value}
          keyName=${keyName::-1} #removing the last character
          api_key=$(get_api_key "$serviceName" "$keyName")

           if [[ $? -eq 0 ]]; then
             echo "  - key: " "$keyName"  ", value: " "$api_key"

           else
              echo "  - key: " "$keyName" ": Not Found"
           fi
         fi
       done < <(echo "$keys" )
   fi
 done
}

# --- Main Execution ---

# Perform backups
backup_keyring
backup_keys

#retrieve all API keys.
retrieve_all_api_keys

echo "All backups and key retrieval completed!"
